import { PerspectiveCamera, OrthographicCamera } from 'three';
import { ComputedRef } from 'vue';
export declare enum CameraType {
    Perspective = "Perspective",
    Orthographic = "Orthographic"
}
export declare type Camera = PerspectiveCamera | OrthographicCamera;
export declare type CameraState = {
    cameras: Array<Camera>;
};
export interface PerspectiveCameraOptions {
    fov?: number;
    near?: number;
    far?: number;
}
export interface OrthographicCameraOptions {
    left?: number;
    right?: number;
    top?: number;
    bottom?: number;
    near?: number;
    far?: number;
}
interface UseCameraReturn {
    activeCamera: ComputedRef<Camera>;
    createCamera: (cameraType?: CameraType, options?: PerspectiveCameraOptions | OrthographicCameraOptions) => Camera;
    updateCamera: () => void;
    pushCamera: (camera: Camera) => void;
}
export declare function useCamera(): UseCameraReturn;
export {};
