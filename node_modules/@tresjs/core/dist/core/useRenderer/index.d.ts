import { MaybeComputedRef, MaybeElementRef } from '@vueuse/core';
import { WebGLRendererParameters, WebGLRenderer, ShadowMapType } from 'three';
import type { TextureEncoding, ToneMapping } from 'three';
export interface UseRendererOptions extends WebGLRendererParameters {
    /**
     * Enable shadows in the Renderer
     *
     * @default false
     */
    shadows?: MaybeComputedRef<boolean>;
    /**
     * Set the shadow map type
     *
     * @default PCFSoftShadowMap
     */
    shadowMapType?: MaybeComputedRef<ShadowMapType>;
    /**
     * Whether to use physically correct lighting mode.
     * See the [lights / physical example](https://threejs.org/examples/#webgl_lights_physical).
     *
     * @default false
     */
    physicallyCorrectLights?: MaybeComputedRef<boolean>;
    /**
     * Defines the output encoding of the renderer.
     *
     * @default LinearEncoding
     */
    outputEncoding?: MaybeComputedRef<TextureEncoding>;
    /**
     * Defines the tone mapping used by the renderer.
     *
     * @default NoToneMapping
     */
    toneMapping?: MaybeComputedRef<ToneMapping>;
    /**
     * Defines the tone mapping exposure used by the renderer.
     *
     * @default 1
     */
    toneMappingExposure?: MaybeComputedRef<number>;
    /**
     * The context used by the renderer.
     *
     * @default undefined
     */
    context?: WebGLRenderingContext | undefined;
    /**
     * Provides a hint to the user agent indicating what configuration of GPU is suitable for this WebGL context.
     * Can be "high-performance", "low-power" or "default".
     *
     * @default "default"
     */
    powerPreference?: 'high-performance' | 'low-power' | 'default';
    /**
     * Whether to preserve the buffers until manually cleared or overwritten.
     *
     * @default false
     */
    preserveDrawingBuffer?: boolean;
    /**
     * The color value to use when clearing the canvas.
     *
     * @default 0x000000
     */
    clearColor?: MaybeComputedRef<string | number>;
    windowSize?: MaybeComputedRef<boolean>;
}
/**
 * Reactive Three.js WebGLRenderer instance
 *
 * @param canvas
 * @param options
 */
export declare function useRenderer(canvas: MaybeElementRef, container: MaybeElementRef, options: UseRendererOptions): {
    renderer: import("vue").ShallowRef<WebGLRenderer | undefined>;
    isReady: import("vue").Ref<boolean>;
    dispose: () => void;
    aspectRatio: import("vue").ComputedRef<number>;
};
export declare type UseRendererReturn = ReturnType<typeof useRenderer>;
