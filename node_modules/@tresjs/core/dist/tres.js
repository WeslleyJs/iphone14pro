/**
 * name: @tresjs/core
 * version: v1.0.0
 * (c) 2022
 * description: Declarative ThreeJS using Vue Components
 * author: Alvaro Saburido <hola@alvarosaburido.dev> (https://github.com/alvarosabu/)
 */
import { computed as D, watch as O, inject as X, defineComponent as _, shallowRef as j, reactive as fe, toRefs as me, ref as F, provide as A, onBeforeUnmount as de, h as J } from "vue";
import { useWindowSize as Y, createEventHook as U, useRafFn as ge, useElementSize as he, useDevicePixelRatio as we, unrefElement as B, resolveUnref as S } from "@vueuse/core";
import * as ve from "three";
import { PerspectiveCamera as $, OrthographicCamera as Ce, Color as I, Vector3 as ye, Clock as Me, Scene as Se, LoadingManager as xe, TextureLoader as Ee, PCFShadowMap as Pe, LinearEncoding as Le, NoToneMapping as Te, WebGLRenderer as Re } from "three";
var Oe = /* @__PURE__ */ ((e) => (e.Perspective = "Perspective", e.Orthographic = "Orthographic", e))(Oe || {});
const P = {
  cameras: []
}, Ae = 45;
let E;
function Z() {
  const { width: e, height: t } = Y(), { setState: n } = oe();
  function a(i = "Perspective", f) {
    if (i === "Perspective") {
      const { near: u, far: m, fov: d } = f || {
        near: 0.1,
        far: 1e3,
        fov: Ae
      };
      E = new $(d, r.value, u, m), P.cameras.push(E);
    } else {
      const { left: u, right: m, top: d, bottom: w, near: C, far: x } = f || {
        left: -100,
        right: 100,
        top: 100,
        bottom: -100,
        near: 0.1,
        far: 1e3
      };
      E = new Ce(u, m, d, w, C, x), P.cameras.push(E);
    }
    return P.cameras.push(E), E;
  }
  const r = D(() => e.value / t.value), o = D(() => P.cameras[0]);
  function s() {
    o.value instanceof $ && (o.value.aspect = r.value), o.value.updateProjectionMatrix();
  }
  function c(i) {
    const f = X("camera");
    i && f && (f.value = i, n("camera", f.value)), P.cameras.push(i), i instanceof $ && (i.aspect = r.value), i.updateProjectionMatrix();
  }
  return O(r, s), {
    activeCamera: o,
    createCamera: a,
    updateCamera: s,
    pushCamera: c
  };
}
let b = { ...ve };
delete b.Scene;
function be() {
  return {
    extend: (t) => {
      b = Object.assign(b, t);
    },
    catalogue: b
  };
}
const Be = (e) => typeof e < "u", V = (e) => !!e && e.constructor === Array;
function $e(e) {
  return typeof e == "number" ? [e, e, e] : e instanceof ye ? [e.x, e.y, e.z] : e;
}
function q(e) {
  return e instanceof I ? e : Array.isArray(e) ? new I(...e) : new I(e);
}
const K = "[TresJS \u25B2 \u25A0 \u25CF] ";
function W() {
  function e(a, r) {
    console.error(`${K} ${a}`, r || "");
  }
  function t(a) {
    console.warn(`${K} ${a}`);
  }
  function n(a, r) {
  }
  return {
    logError: e,
    logWarning: t,
    logMessage: n
  };
}
const Ie = ["rotation", "scale", "position"];
function ze(e) {
  const { logMessage: t, logError: n } = W();
  function a(r) {
    return Object.entries(r).filter(([o, s]) => {
      var c, i;
      return (i = (c = s == null ? void 0 : s.prototype) == null ? void 0 : c.constructor) == null ? void 0 : i.toString().includes("class");
    }).map(([o, s]) => {
      const c = `${e}${o}`, i = _({
        name: c,
        setup(f, { slots: u, attrs: m, ...d }) {
          t(c, {
            props: f,
            slots: u,
            attrs: m,
            ctx: d
          });
          let w;
          const { scene: C } = ae(), { pushCamera: x } = Z();
          function L() {
            if ((u == null ? void 0 : u.default) && (u == null ? void 0 : u.default())) {
              const y = u.default().map((l) => {
                var h;
                let v;
                const g = l.type.name.replace(e, "");
                return (h = l == null ? void 0 : l.props) != null && h.args ? v = new r[g](...l.props.args) : v = new r[g](), l != null && l.props && T(l.props, v), v;
              });
              w = new s(...y);
            } else
              m.args ? w = new s(...m.args) : w = new s();
            T(m, w), c.includes("Camera") && x(w), w.isObject3D && (C == null || C.value.add(w)), t("Instance added", C), d.expose(w);
          }
          function T(y, l) {
            Object.entries(y).forEach(([v, g]) => {
              const h = v.replace(/(-\w)/g, (M) => M[1].toUpperCase());
              if (!(h === "args" || g === void 0)) {
                Ie.includes(v) && g && (g = $e(g));
                try {
                  l[h] && Be(l[h].set) ? V(g) ? l[h].set(...g) : l[h].set(g) : (g === "" && (g = !0), l[h] = g);
                } catch (M) {
                  n(`There was an error setting ${h} property`, M);
                }
              }
            }), y.ref && (y.ref = l);
          }
          return L(), () => {
          };
        }
      });
      return [c, i];
    });
  }
  return {
    createComponentInstances: a
  };
}
const ee = U(), te = U(), ne = U(), Q = new Me(), { pause: De, resume: Fe, isActive: _e } = ge(
  () => {
    const e = Q.getElapsedTime(), t = Q.getDelta();
    ee.trigger({ delta: t, elapsed: e }), te.trigger({ delta: t, elapsed: e }), ne.trigger({ delta: t, elapsed: e });
  },
  { immediate: !1 }
);
function re() {
  return {
    onBeforeLoop: ee.on,
    onLoop: te.on,
    onAfterLoop: ne.on,
    pause: De,
    resume: Fe,
    isActive: _e
  };
}
const je = j(new Se());
function ae() {
  return {
    scene: je
  };
}
function Ue(e) {
  const t = { nodes: {}, materials: {} };
  return e && e.traverse((n) => {
    n.name && (t.nodes[n.name] = n), n.material && !t.materials[n.material.name] && (t.materials[n.material.name] = n.material);
  }), t;
}
async function Je(e, t, n, a, r) {
  const { logError: o } = W(), s = new e();
  r && r(s), n && n(e);
  const i = (Array.isArray(t) ? t : [t]).map(
    (f) => new Promise((u, m) => {
      s.load(
        f,
        (d) => {
          d.scene && Object.assign(d, Ue(d.scene)), u(d);
        },
        a,
        (d) => m(o("[useLoader] - Failed to load resource", d))
      );
    })
  );
  return V(t) ? await Promise.all(i) : await i[0];
}
async function qe(e) {
  const t = new xe(), n = new Ee(t), a = (r) => new Promise((o, s) => {
    n.load(
      r,
      (c) => o(c),
      () => null,
      () => {
        s(new Error("[useTextures] - Failed to load texture"));
      }
    );
  });
  if (V(e)) {
    const r = await Promise.all(e.map((o) => a(o)));
    return e.length > 1 ? r : r[0];
  } else {
    const { map: r, displacementMap: o, normalMap: s, roughnessMap: c, metalnessMap: i, aoMap: f } = e;
    return {
      map: r ? await a(r) : null,
      displacementMap: o ? await a(o) : null,
      normalMap: s ? await a(s) : null,
      roughnessMap: c ? await a(c) : null,
      metalnessMap: i ? await a(i) : null,
      aoMap: f ? await a(f) : null
    };
  }
}
const R = fe({});
function oe() {
  function e(n) {
    return R[n];
  }
  function t(n, a) {
    R[n] = a;
  }
  return {
    state: R,
    ...me(R),
    getState: e,
    setState: t
  };
}
const p = j(), z = F(!1);
function Ve(e, t, n) {
  const {
    alpha: a = !1,
    antialias: r,
    depth: o,
    logarithmicDepthBuffer: s,
    failIfMajorPerformanceCaveat: c,
    precision: i,
    premultipliedAlpha: f,
    stencil: u,
    shadows: m = !1,
    shadowMapType: d = Pe,
    physicallyCorrectLights: w = !1,
    outputEncoding: C = Le,
    toneMapping: x = Te,
    toneMappingExposure: L = 1,
    context: T = void 0,
    powerPreference: y = "default",
    preserveDrawingBuffer: l = !1,
    clearColor: v = q("#000000"),
    windowSize: g = !1
  } = n, { width: h, height: M } = g ? Y() : he(t), { pixelRatio: k } = we(), { pause: se, resume: ie } = re(), ce = D(() => h.value / M.value), N = () => {
    !p.value || (p.value.setSize(h.value, M.value), p.value.setPixelRatio(k.value));
  }, H = () => {
    !p.value || (p.value.shadowMap.enabled = S(m), p.value.outputEncoding = S(C), p.value.shadowMap.type = S(d), p.value.physicallyCorrectLights = S(w), p.value.toneMapping = S(x), p.value.toneMappingExposure = S(L), p.value.setClearColor(q(S(v))));
  }, ue = () => {
    const G = B(e);
    if (p.value || !G)
      return;
    p.value = new Re({
      canvas: G,
      alpha: a,
      antialias: r,
      context: T,
      depth: o,
      failIfMajorPerformanceCaveat: c,
      logarithmicDepthBuffer: s,
      powerPreference: y,
      precision: i,
      stencil: u,
      preserveDrawingBuffer: l,
      premultipliedAlpha: f
    });
    const { setState: pe } = oe();
    pe("renderer", p.value), H(), N(), ie(), z.value = !0;
  }, le = () => {
    !p.value || (p.value.dispose(), p.value = void 0, z.value = !1, se());
  };
  return O([h, M, k], N), O(
    () => [
      m,
      d,
      C,
      w,
      x,
      L,
      v
    ],
    H
  ), O(
    () => [e, t],
    () => {
      B(e) && B(t) && ue();
    },
    { immediate: !0, deep: !0 }
  ), {
    renderer: p,
    isReady: z,
    dispose: le,
    aspectRatio: ce
  };
}
const We = _({
  name: "TresCanvas",
  props: {
    shadows: Boolean,
    shadowMapType: Object,
    physicallyCorrectLights: Boolean,
    outputEncoding: Object,
    toneMapping: Object,
    toneMappingExposure: Number,
    context: Object,
    powerPreference: Object,
    preserveDrawingBuffer: Boolean,
    clearColor: String,
    windowSize: Boolean
  },
  setup(e, { slots: t, attrs: n }) {
    const { logError: a } = W(), r = F(), o = F(), { renderer: s, dispose: c, aspectRatio: i } = Ve(r, o, e), f = j();
    return A("camera", f), A("renderer", s), A("aspect-ratio", i), t.default && !t.default().some((u) => u.type.name === "Scene") && a("TresCanvas must contain a Scene component."), t.default && !t.default().some((u) => {
      var m;
      return (m = u.type.name) == null ? void 0 : m.includes("Camera");
    }) && a("Scene must contain a Camera component."), de(() => c()), () => {
      if (t.default)
        return J(
          "div",
          {
            ref: o,
            style: {
              position: "relative",
              width: "100%",
              height: "100vh",
              ...n.style
            }
          },
          [
            J("canvas", {
              ref: r,
              style: { width: "100%", height: "100%", position: "absolute", top: 0, left: 0 }
            }),
            t.default()
          ]
        );
    };
  }
}), ke = _({
  name: "Scene",
  setup(e, { slots: t }) {
    const { scene: n } = ae(), a = X("renderer"), { activeCamera: r } = Z(), { onLoop: o } = re();
    return A("local-scene", n), o(() => {
      (a == null ? void 0 : a.value) && (r == null ? void 0 : r.value) && (n == null ? void 0 : n.value) && a.value.render(n == null ? void 0 : n.value, r.value);
    }), () => {
      if (t.default)
        return t.default();
    };
  }
}), Ke = Symbol("UseTresState"), Qe = {
  install(e, t) {
    const n = (t == null ? void 0 : t.prefix) || "Tres";
    e.component(`${n}Canvas`, We), e.component(`${n}Scene`, ke);
    const { catalogue: a } = be(), { createComponentInstances: r } = ze(n);
    r(t != null && t.extends ? { ...a, ...t.extends } : a).forEach(([s, c]) => {
      e.component(s, c);
    });
  }
};
export {
  Oe as CameraType,
  Ke as UseTresStateSymbol,
  Qe as default,
  Ue as trasverseObjects,
  Z as useCamera,
  be as useCatalogue,
  ze as useInstanceCreator,
  Je as useLoader,
  re as useRenderLoop,
  Ve as useRenderer,
  ae as useScene,
  qe as useTexture,
  oe as useTres
};
